name: Java CI with Maven and SonarQube

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: windows-latest  # Specify Windows runner
    
    steps:
    # Step 1: Checkout the code from the repository
    - uses: actions/checkout@v2

    # Step 2: Set up JDK 21
    - name: Set up JDK 21
      uses: actions/setup-java@v2
      with:
        java-version: '21'
        distribution: 'adopt'

    # Step 3: Cache Maven dependencies
    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: C:\Users\runneradmin\.m2\repository  # Path to Maven repository in Windows
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Step 4: Start SonarQube (If self-hosted)
    - name: Start SonarQube Server
      run: |
        Start-Process -FilePath "C:\path\to\sonarqube\bin\windows-x86-64\StartSonar.bat"
      shell: pwsh
    
    # Step 5: Wait for SonarQube to be Ready
    - name: Wait for SonarQube
      run: |
        Start-Sleep -Seconds 30  # Give it time to start

       # Step 8: Run SonarQube Analysis
    - name: Run SonarQube Analysis
      run: mvn sonar:sonar -Dsonar.host.url=http://localhost:9000 -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    # Step 6: Build with Maven
    - name: Build with Maven
      run: mvn clean install

    # Step 7: Run Unit Tests
    - name: Run Unit Tests
      run: mvn test

    # Step 9: Build & push Docker image (Optional)
    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
          image: rishika03/demo
          tags: latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
